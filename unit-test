#! /bin/bash

TESTS=12
REPLICATOR="./http-replicator -v"
PORT=8090
PREFIX="/tmp/unittest$1"
URL_HTTP="www.w3.org:80/Protocols/HTTP/1.1/rfc2616.txt.gz"
URL_CHUNKED="jigsaw.w3.org:80/HTTP/ChunkedScript"
URL_FTP="ftp.debian.org:21/debian/doc/FAQ/debian-faq.en.pdf.gz"

if [ -z "$1" ]; then
  while [ $((++i)) -le $TESTS ]; do
    $0 $i
    echo ========================================================================
  done
  exit 0
fi

function exists
{
  if test -e $1; then echo OK; else echo ERROR; fi
}

function compare
{
  if test ! -e $1; then
    echo ERROR: 1st file missing
  elif test ! -e $2; then
    echo ERROR: 2nd file missing
  elif test `md5 -q $1` != `md5 -q $2`; then
    echo ERROR: files not equal
  else
    echo OK
  fi
}

function logged
{
  if grep -q "$1" $PREFIX.log; then echo OK; else echo ERROR; fi
}

echo -n "UNITTEST $1: "
set -m
rm -rf $PREFIX.*
mkdir $PREFIX.cache
$REPLICATOR -p $PORT -r $PREFIX.cache > $PREFIX.log &
sleep .5
case $1 in
  1)
    echo "DOWNLOADING NEW FILE"
    curl -o $PREFIX.out1 http://$URL_HTTP -#
    curl -x http://localhost:$PORT -o $PREFIX.out2 http://$URL_HTTP -#
    sleep .5
    echo " * file cached and finalized ........................................... `exists $PREFIX.cache/$URL_HTTP`"
    echo " * separate download and served file are equal ......................... `compare $PREFIX.out1 $PREFIX.out2`"
    echo " * cached and served file are equal .................................... `compare $PREFIX.cache/$URL_HTTP $PREFIX.out2`"
    ;;
  2)
    echo "LEAVING PARTIAL FILE IN CACHE"
    curl -x http://localhost:$PORT -o $PREFIX.out http://$URL_HTTP -# &
    sleep 1
    kill -int %+
    echo
    sleep .5
    echo " * file cached, not finalized .......................................... `exists $PREFIX.cache/$URL_HTTP.incomplete`"
    ;;
  3)
    echo "SERVING FILE FROM CACHE"
    curl -x http://localhost:$PORT -o $PREFIX.out1 http://$URL_HTTP -#
    curl -x http://localhost:$PORT -o $PREFIX.out2 http://$URL_HTTP -#
    sleep .5
    echo " * first file cached and finalized ..................................... `exists $PREFIX.cache/$URL_HTTP`"
    echo " * second file served from cache ....................................... `logged 'Complete file in cache'`"
    echo " * cached and first served file are equal .............................. `compare $PREFIX.cache/$URL_HTTP $PREFIX.out1`"
    echo " * cached and second served file are equal ............................. `compare $PREFIX.cache/$URL_HTTP $PREFIX.out2`"
    ;;
  4)
    echo "RESUMING PARTIAL FILE BY CLIENT"
    curl -o $PREFIX.out http://$URL_HTTP -# &
    sleep 1
    kill -int %+
    echo
    sleep .5
    curl -x http://localhost:$PORT -C - -o $PREFIX.out http://$URL_HTTP -#
    sleep .5
    echo " * received complete file .............................................. `logged 'Server sends HTTP/1.1 200 OK'`"
    echo " * served partial file ................................................. `logged 'Sending HTTP/1.1 206 Partial Content'`"
    echo " * cached and served file are equal .................................... `compare $PREFIX.cache/$URL_HTTP $PREFIX.out`"
    ;;
  5)
    echo "REDOWNLOADING CHANGED FILE"
    mkdir -p $PREFIX.cache/$URL_HTTP
    rmdir $PREFIX.cache/$URL_HTTP
    touch -m -t 190112140000 $PREFIX.cache/$URL_HTTP
    curl -x http://localhost:$PORT -o $PREFIX.out http://$URL_HTTP -#
    sleep .5
    echo " * detected complete file in cache ..................................... `logged 'Complete file in cache'`"
    echo " * downloading new file ................................................ `logged 'Opening new file'`"
    echo " * cached and served file are equal .................................... `compare $PREFIX.cache/$URL_HTTP $PREFIX.out`"
    ;;
  6)
    echo "RESUMING PARTIAL UNCHANGED FILE IN CACHE"
    curl -x http://localhost:$PORT -o $PREFIX.out http://$URL_HTTP -# &
    sleep 1
    kill -int %+
    echo
    sleep .5
    curl -x http://localhost:$PORT -o $PREFIX.out http://$URL_HTTP -#
    sleep .5
    echo " * replicator asks for missing part..................................... `logged 'Partial file in cache'`"
    echo " * received partial file ............................................... `logged 'Server sends HTTP/1.1 206 Partial Content'`"
    echo " * cached and served file are equal .................................... `compare $PREFIX.cache/$URL_HTTP $PREFIX.out`"
    ;;
  7)
    echo "RESUMING PARTIAL CHANGED FILE IN CACHE"
    mkdir -p $PREFIX.cache/$URL_HTTP
    rmdir $PREFIX.cache/$URL_HTTP
    ps aux > $PREFIX.cache/$URL_HTTP.incomplete
    curl -x http://localhost:$PORT -o $PREFIX.out http://$URL_HTTP -#
    sleep .5
    echo " * replicator asks for missing part..................................... `logged 'Partial file in cache'`"
    echo " * received complete file .............................................. `logged 'Server sends HTTP/1.1 200 OK'`"
    echo " * cached and served file are equal .................................... `compare $PREFIX.cache/$URL_HTTP $PREFIX.out`"
    ;;
  8)
    echo "JOINING DOWNLOADS"
    echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%% FIRST DOWNLOAD %%%%%%%%%%%%%%%%%%%%%%%%%%%%"
    curl -x http://localhost:$PORT -o $PREFIX.out1 http://$URL_HTTP -s &
    sleep 1
    curl -x http://localhost:$PORT -o $PREFIX.out2 http://$URL_HTTP -#
    sleep .5
    echo " * downloads are joined ................................................ `logged 'Joined running download'`"
    echo " * cached and first served file are equal .............................. `compare $PREFIX.cache/$URL_HTTP $PREFIX.out1`"
    echo " * cached and second served file are equal ............................. `compare $PREFIX.cache/$URL_HTTP $PREFIX.out2`"
    ;;
  9)
    echo "DOWNLOADING NEW FILE, CHUNKED TRANSFER"
    curl -o $PREFIX.out1 http://$URL_CHUNKED -#
    curl -x http://localhost:$PORT -o $PREFIX.out2 http://$URL_CHUNKED -#
    sleep .5
    echo " * separate download and served file are equal ......................... `compare $PREFIX.out1 $PREFIX.out2`"
    echo " * server sends chunked data ........................................... `logged 'Transfer-Encoding: chunked'`"
    echo " * processing chunked data ............................................. `logged 'Switching to ChunkedDataResponse'`"
    echo " * cached and served file are equal .................................... `compare $PREFIX.cache/$URL_CHUNKED $PREFIX.out2`"
    ;;
  10)
    echo "DOWNLOADING NEW FILE, FTP TRANSFER"
    curl -o $PREFIX.out1 ftp://$URL_FTP -#
    curl -x http://localhost:$PORT -o $PREFIX.out2 ftp://$URL_FTP -#
    sleep .5
    echo " * separate download and served file are equal ......................... `compare $PREFIX.out1 $PREFIX.out2`"
    echo " * cached and served file are equal .................................... `compare $PREFIX.cache/$URL_FTP $PREFIX.out2`"
    ;;
  11)
    echo "SERVING FILE FROM CACHE, FTP TRANSFER"
    curl -x http://localhost:$PORT -o $PREFIX.out1 ftp://$URL_FTP -#
    curl -x http://localhost:$PORT -o $PREFIX.out2 ftp://$URL_FTP -#
    sleep .5
    echo " * first file cached and finalized ..................................... `exists $PREFIX.cache/$URL_FTP`"
    echo " * second file served from cache ....................................... `logged 'Serving complete file from cache'`"
    echo " * cached and first served file are equal .............................. `compare $PREFIX.cache/$URL_FTP $PREFIX.out1`"
    echo " * cached and second served file are equal ............................. `compare $PREFIX.cache/$URL_FTP $PREFIX.out2`"
    ;;
  12)
    echo "RESUMING PARTIAL UNCHANGED FILE IN CACHE, FTP TRANSFER"
    curl -x localhost:$PORT -o $PREFIX.out ftp://$URL_FTP -# &
    sleep 1
    kill -int %+
    echo
    sleep .5
    curl -x localhost:$PORT -o $PREFIX.out ftp://$URL_FTP -#
    sleep .5
    echo " * replicator resumes file ............................................. `logged 'Resuming partial file in cache'`"
    echo " * cached and served file are equal .................................... `compare $PREFIX.cache/$URL_FTP $PREFIX.out`"
    ;;
  *)
    echo "Not implemented"
    ;;
esac
kill -int %-
