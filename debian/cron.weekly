#! /usr/bin/python
#
#  The <a href=http-replicator.html>replicator</a> http proxy server is especially useful for maintaining a <a href=http://www.debian.org>debian</a> package cache.
#  Such caches tend to grow huge if nothing ever gets thrown away.
#  This script is meant to be run as a (weekly?) cron task to delete the packages that are unlikely to be needed anymore.
#  A list of deleted packages is mailed by cron to the system administrator.
#  If the script is run by hand this list goes to the stdout.
#  In that case the user should be the super user or the script will be in 'dummy mode' where nothing gets deleted.

import os, sys

#  constants
#
#  Only two constants control this script.
#  Obviously, the replicator cache directory [DIR] needs to be known in order locate the debian packages.
#  The constant [KEEP] determines how many versions of the same package are kept in cache.
#  These settiongs are read from the <a href=http-replicator.conf.html>configuration file</a>.
#  A [KEEP] value of one will only keep the most recent package.
#  This keeps the cache small in size but involves the risk that an older package has to be redownloaded when downgrading from a badly functionating successor.
#  This simple cleaning algorithm obviously fails when different distributions are cached trough the same proxy.

execfile('/etc/http-replicator.conf')

#  function main
#
#  Function [os.walk] is used to search the replicator cache for debian packages.
#  For each directory a dictionary [debs] is created which contains the present debian packages and their versions.
#  If a package's version list contains more than [KEEP] elements the command [dpkg --compare-versions] is used to find the oldest packages to remove.
#  The variable [deleted] keeps track of all deleted kilobytes to summarize the newly reclaimed free space.

def main ():

	if not KEEP:
		return 0 # succes; exit silently

	print 'cleaning http-replicator cache...'
	print

	deleted = 0 # nothing deleted initially
	for root, dirs, files in os.walk(DIR): # scan replicator cache
		debs = {}

		for file, extension in map(os.path.splitext, files):
			if extension == '.deb': # debian package found
				program, version = file.split('_', 1) # package name split from version
				debs.setdefault(program, []).append(version) # put package in dictionary

		for program, versions in debs.items():
			if len(versions) > KEEP: # too many versions present
				versions.sort(lambda x, y: os.system('dpkg --compare-versions %s gt %s' % (x, y)) and 1 or -1) # sort list by version
				for version in versions[KEEP:]:
					file = os.path.join(root, '%s_%s.deb' % (program, version))
					size = os.path.getsize(file) / 1024.
					deleted += size # add filesize
					if not os.getuid(): # if not run by root do nothing (dummy run)
						os.remove(file) # delete old package
				print '%8.1f %s %s [%s]' % (size, program, ','.join(versions[KEEP:]), ','.join(versions[:KEEP]))

	print
	print '%8.1f kB deleted' % deleted

	return 0 # succes

if __name__ == '__main__':

	sys.exit(main())
